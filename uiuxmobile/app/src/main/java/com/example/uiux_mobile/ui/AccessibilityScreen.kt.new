package com.example.uiux_mobile.ui

import androidx.compose.foundation.layout.*
import androidx.compose.foundation.rememberScrollState
import androidx.compose.foundation.selection.toggleable
import androidx.compose.foundation.shape.CircleShape
import androidx.compose.foundation.verticalScroll
import androidx.compose.material.icons.Icons
import androidx.compose.material.icons.automirrored.filled.ArrowBack
import androidx.compose.material.icons.filled.Accessibility
import androidx.compose.material.icons.filled.CheckCircle
import androidx.compose.material.icons.filled.Code
import androidx.compose.material.icons.filled.Contrast
import androidx.compose.material.icons.filled.Gesture
import androidx.compose.material.icons.filled.Info
import androidx.compose.material.icons.filled.KeyboardVoice
import androidx.compose.material.icons.filled.Lightbulb
import androidx.compose.material.icons.filled.TextFields
import androidx.compose.material.icons.filled.TouchApp
import androidx.compose.material.icons.filled.Visibility
import androidx.compose.material3.*
import androidx.compose.runtime.*
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.draw.clip
import androidx.compose.ui.graphics.vector.ImageVector
import androidx.compose.ui.semantics.Role
import androidx.compose.ui.semantics.contentDescription
import androidx.compose.ui.semantics.semantics
import androidx.compose.ui.tooling.preview.Preview
import androidx.compose.ui.unit.dp
import com.example.uiux_mobile.ui.theme.UiuxmobileTheme

@OptIn(ExperimentalMaterial3Api::class)
@Composable
fun AccessibilityScreen(
    onBackClick: () -> Unit = {}
) {
    var isHighContrast by remember { mutableStateOf(false) }
    var isLargeText by remember { mutableStateOf(false) }
    var isScreenReaderEnabled by remember { mutableStateOf(false) }
    
    Scaffold(
        topBar = {
            TopAppBar(
                title = { Text("Accessibility & Inclusive Design") },
                navigationIcon = {
                    IconButton(
                        onClick = onBackClick,
                        modifier = Modifier.semantics {
                            contentDescription = "Back to home"
                        }
                    ) {
                        Icon(
                            imageVector = Icons.AutoMirrored.Filled.ArrowBack,
                            contentDescription = null
                        )
                    }
                }
            )
        }
    ) { padding ->
        Column(
            modifier = Modifier
                .fillMaxSize()
                .padding(padding)
                .padding(16.dp)
                .verticalScroll(rememberScrollState())
        ) {
            // Section 1: WCAG Guidelines
            AccessibilitySection(
                title = "WCAG Compliance",
                description = "Following Web Content Accessibility Guidelines"
            ) {
                AccessibilityItem(
                    icon = Icons.Default.Contrast,
                    title = "Contrast Ratio",
                    description = "Minimum 4.5:1 for normal text (AA)",
                    isEnabled = true
                )
                
                AccessibilityItem(
                    icon = Icons.Default.Accessibility,
                    title = "Screen Reader Support",
                    description = "Content descriptions and proper labeling",
                    isEnabled = true
                )
                
                AccessibilityItem(
                    icon = Icons.Default.TouchApp,
                    title = "Touch Target Size",
                    description = "Minimum 48dp x 48dp for touch targets",
                    isEnabled = true
                )
            }
            
            Spacer(modifier = Modifier.height(24.dp))
            
            // Section 2: Visual Adjustments
            AccessibilitySection(
                title = "Visual Adjustments",
                description = "Customize the visual presentation"
            ) {
                AccessibilityToggleItem(
                    icon = Icons.Default.Contrast,
                    title = "High Contrast Mode",
                    description = "Enhances text and UI element visibility",
                    isChecked = isHighContrast,
                    onCheckedChange = { isHighContrast = it }
                )
                
                AccessibilityToggleItem(
                    icon = Icons.Default.TextFields,
                    title = "Large Text",
                    description = "Increases text size for better readability",
                    isChecked = isLargeText,
                    onCheckedChange = { isLargeText = it }
                )
            }
            
            Spacer(modifier = Modifier.height(24.dp))
            
            // Section 3: Navigation & Interaction
            AccessibilitySection(
                title = "Navigation & Interaction",
                description = "Alternative ways to interact with the app"
            ) {
                AccessibilityToggleItem(
                    icon = Icons.Default.Accessibility,
                    title = "Screen Reader Mode",
                    description = "Optimize for screen readers",
                    isChecked = isScreenReaderEnabled,
                    onCheckedChange = { isScreenReaderEnabled = it }
                )
                
                AccessibilityItem(
                    icon = Icons.Default.Gesture,
                    title = "Gesture Navigation",
                    description = "Alternative to touch interactions",
                    isEnabled = true
                )
                
                AccessibilityItem(
                    icon = Icons.Default.KeyboardVoice,
                    title = "Voice Commands",
                    description = "Control the app using voice",
                    isEnabled = true
                )
            }
            
            Spacer(modifier = Modifier.height(24.dp))
            
            // Section 4: WCAG Principles
            AccessibilitySection(
                title = "WCAG 2.1 Principles",
                description = "Core guidelines for accessibility"
            ) {
                AccessibilityPrinciple(
                    icon = Icons.Default.Visibility,
                    title = "Perceivable",
                    description = "Content must be presentable in different ways"
                )
                
                AccessibilityPrinciple(
                    icon = Icons.Default.TouchApp,
                    title = "Operable",
                    description = "Interface components must be operable"
                )
                
                AccessibilityPrinciple(
                    icon = Icons.Default.Lightbulb,
                    title = "Understandable",
                    description = "Information and operation must be understandable"
                )
                
                AccessibilityPrinciple(
                    icon = Icons.Default.Code,
                    title = "Robust",
                    description = "Content must be robust and compatible"
                )
            }
        }
    }
}

@Composable
private fun AccessibilitySection(
    title: String,
    description: String,
    content: @Composable () -> Unit
) {
    Column(
        modifier = Modifier.fillMaxWidth()
    ) {
        Text(
            text = title,
            style = MaterialTheme.typography.titleMedium,
            modifier = Modifier.padding(bottom = 4.dp)
        )
        
        Text(
            text = description,
            style = MaterialTheme.typography.bodyMedium,
            color = MaterialTheme.colorScheme.onSurfaceVariant,
            modifier = Modifier.padding(bottom = 12.dp)
        )
        
        Surface(
            shape = MaterialTheme.shapes.medium,
            color = MaterialTheme.colorScheme.surfaceVariant,
            modifier = Modifier.fillMaxWidth()
        ) {
            Column(
                modifier = Modifier.padding(8.dp)
            ) {
                content()
            }
        }
    }
}

@Composable
private fun AccessibilityItem(
    icon: ImageVector,
    title: String,
    description: String,
    isEnabled: Boolean
) {
    Row(
        modifier = Modifier
            .fillMaxWidth()
            .padding(12.dp),
        verticalAlignment = Alignment.CenterVertically
    ) {
        Icon(
            imageVector = icon,
            contentDescription = null,
            tint = if (isEnabled) MaterialTheme.colorScheme.primary 
                  else MaterialTheme.colorScheme.onSurfaceVariant.copy(alpha = 0.38f),
            modifier = Modifier.size(24.dp)
        )
        
        Spacer(modifier = Modifier.width(16.dp))
        
        Column(
            modifier = Modifier.weight(1f)
        ) {
            Text(
                text = title,
                style = MaterialTheme.typography.bodyLarge,
                color = if (isEnabled) MaterialTheme.colorScheme.onSurface 
                       else MaterialTheme.colorScheme.onSurfaceVariant.copy(alpha = 0.6f)
            )
            
            Text(
                text = description,
                style = MaterialTheme.typography.bodyMedium,
                color = if (isEnabled) MaterialTheme.colorScheme.onSurfaceVariant 
                       else MaterialTheme.colorScheme.onSurfaceVariant.copy(alpha = 0.38f)
            )
        }
        
        if (isEnabled) {
            Icon(
                imageVector = Icons.Default.CheckCircle,
                contentDescription = "Enabled",
                tint = MaterialTheme.colorScheme.primary,
                modifier = Modifier.size(24.dp)
            )
        } else {
            Icon(
                imageVector = Icons.Default.Info,
                contentDescription = "Info",
                tint = MaterialTheme.colorScheme.onSurfaceVariant.copy(alpha = 0.38f),
                modifier = Modifier.size(24.dp)
            )
        }
    }
}

@Composable
private fun AccessibilityToggleItem(
    icon: ImageVector,
    title: String,
    description: String,
    isChecked: Boolean,
    onCheckedChange: (Boolean) -> Unit
) {
    Row(
        modifier = Modifier
            .fillMaxWidth()
            .toggleable(
                value = isChecked,
                onValueChange = onCheckedChange,
                role = Role.Switch
            )
            .padding(12.dp),
        verticalAlignment = Alignment.CenterVertically
    ) {
        Icon(
            imageVector = icon,
            contentDescription = null,
            tint = if (isChecked) MaterialTheme.colorScheme.primary 
                  else MaterialTheme.colorScheme.onSurfaceVariant,
            modifier = Modifier.size(24.dp)
        )
        
        Spacer(modifier = Modifier.width(16.dp))
        
        Column(
            modifier = Modifier.weight(1f)
        ) {
            Text(
                text = title,
                style = MaterialTheme.typography.bodyLarge,
                color = if (isChecked) MaterialTheme.colorScheme.onSurface 
                       else MaterialTheme.colorScheme.onSurfaceVariant
            )
            
            Text(
                text = description,
                style = MaterialTheme.typography.bodyMedium,
                color = MaterialTheme.colorScheme.onSurfaceVariant
            )
        }
        
        Switch(
            checked = isChecked,
            onCheckedChange = null, // null because we're handling the toggle in the parent Row
            modifier = Modifier.semantics {}
        )
    }
}

@Composable
private fun AccessibilityPrinciple(
    icon: ImageVector,
    title: String,
    description: String
) {
    Row(
        modifier = Modifier
            .fillMaxWidth()
            .padding(12.dp),
        verticalAlignment = Alignment.CenterVertically
    ) {
        Surface(
            color = MaterialTheme.colorScheme.primaryContainer,
            shape = CircleShape,
            modifier = Modifier.size(40.dp)
        ) {
            Icon(
                imageVector = icon,
                contentDescription = null,
                tint = MaterialTheme.colorScheme.onPrimaryContainer,
                modifier = Modifier.padding(8.dp)
            )
        }
        
        Spacer(modifier = Modifier.width(16.dp))
        
        Column(
            modifier = Modifier.weight(1f)
        ) {
            Text(
                text = title,
                style = MaterialTheme.typography.bodyLarge,
                color = MaterialTheme.colorScheme.onSurface
            )
            
            Text(
                text = description,
                style = MaterialTheme.typography.bodyMedium,
                color = MaterialTheme.colorScheme.onSurfaceVariant
            )
        }
    }
}

@Preview(showBackground = true)
@Composable
fun AccessibilityScreenPreview() {
    UiuxmobileTheme {
        AccessibilityScreen()
    }
}
